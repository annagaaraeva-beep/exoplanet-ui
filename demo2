import flet as ft
import pandas as pd
import matplotlib.pyplot as plt
import io
import base64

# Constants
BLANK_IMAGE_B64 = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII="

def main(page: ft.Page):
    """
    Main function to set up the Flet application.
    Simplified UI: Upload CSV, select numeric columns for scatter plot, auto-update chart.
    Improved to auto-convert columns to numeric where possible and preselect specific columns if present (e.g., for exoplanet data).
    Added placeholders for future AI model integration.
    """
    page.title = "Data Viewer"
    page.scroll = ft.ScrollMode.ADAPTIVE
    page.theme_mode = ft.ThemeMode.LIGHT

    # State variables
    df = None

    # UI components
    chart_image = ft.Image(
        src_base64=BLANK_IMAGE_B64,
        width=600,
        height=400,
        fit=ft.ImageFit.CONTAIN
    )
    status_text = ft.Text("", color=ft.Colors.RED)
    x_dropdown = ft.Dropdown(label="X Axis", options=[], width=200, on_change=None)
    y_dropdown = ft.Dropdown(label="Y Axis", options=[], width=200, on_change=None)

    # Placeholder for future AI integration 



    def update_chart(e=None):
        """
        Updates the scatter plot on column selection change.
        """
        try:
            if df is None or df.empty:
                chart_image.src_base64 = BLANK_IMAGE_B64
                status_text.value = "No data loaded."
                return

            x_col = x_dropdown.value
            y_col = y_dropdown.value
            if not x_col or not y_col:
                chart_image.src_base64 = BLANK_IMAGE_B64
                status_text.value = "Select X and Y columns."
                return

            if x_col == y_col:
                status_text.value = "Select different columns for X and Y."
                return

            if not all(col in df.columns for col in [x_col, y_col]):
                chart_image.src_base64 = BLANK_IMAGE_B64
                status_text.value = "Columns not found."
                return

            if not pd.api.types.is_numeric_dtype(df[x_col]) or not pd.api.types.is_numeric_dtype(df[y_col]):
                chart_image.src_base64 = BLANK_IMAGE_B64
                status_text.value = "Columns must be numeric."
                return

            plt.figure(figsize=(6, 4))
            plt.scatter(df[x_col], df[y_col], alpha=0.5, c="blue")
            plt.xlabel(x_col)
            plt.ylabel(y_col)
            plt.title(f"{x_col} vs. {y_col}")
            buf = io.BytesIO()
            plt.savefig(buf, format="png", bbox_inches="tight")
            plt.close()
            buf.seek(0)
            img_b64 = base64.b64encode(buf.read()).decode("utf-8")
            chart_image.src_base64 = img_b64
            status_text.value = "Chart updated."
        except Exception as e:
            chart_image.src_base64 = BLANK_IMAGE_B64
            status_text.value = f"Error: {str(e)}"
        finally:
            page.update()

    x_dropdown.on_change = update_chart
    y_dropdown.on_change = update_chart

    # Callback for file picker
    def file_picker_result(e: ft.FilePickerResultEvent):
        """
        Loads CSV, attempts to convert columns to numeric, populates dropdowns with numeric columns, 
        preselects 'koi_period' and 'koi_score' if present (for exoplanet data), else first two, and auto-plots if possible.
        """
        nonlocal df
        try:
            if not e.files:
                status_text.value = "No file selected."
                page.update()
                return

            file_path = e.files[0].path
            status_text.value = "Loading..."
            page.update()

            df = pd.read_csv(file_path, encoding="utf-8", on_bad_lines="skip")
            
            # Attempt to convert all columns to numeric where possible (coerce non-numeric to NaN)
            df = df.apply(pd.to_numeric, errors='coerce')

            # Drop columns that are entirely NaN after conversion (if any)
            df = df.dropna(axis=1, how='all')

            # Get numeric columns (now includes converted ones)
            numeric_cols = [col for col in df.columns if pd.api.types.is_numeric_dtype(df[col])]

            if len(numeric_cols) < 2:
                status_text.value = f"Insufficient numeric columns found ({len(numeric_cols)} detected). Need at least 2."
                x_dropdown.options = []
                y_dropdown.options = []
                x_dropdown.value = None
                y_dropdown.value = None
                return

            dropdown_options = [ft.dropdown.Option(col) for col in numeric_cols]
            x_dropdown.options = dropdown_options
            y_dropdown.options = dropdown_options

            # Preselect specific columns if present (e.g., for exoplanet data)
            preferred_x = 'koi_period'
            preferred_y = 'koi_score'
            if preferred_x in numeric_cols and preferred_y in numeric_cols:
                x_dropdown.value = preferred_x
                y_dropdown.value = preferred_y
            elif len(numeric_cols) >= 2:
                x_dropdown.value = numeric_cols[0]
                y_dropdown.value = numeric_cols[1]
            else:
                x_dropdown.value = None
                y_dropdown.value = None

            update_chart()

        except Exception as e:
            df = None
            x_dropdown.options = []
            y_dropdown.options = []
            x_dropdown.value = None
            y_dropdown.value = None
            chart_image.src_base64 = BLANK_IMAGE_B64
            status_text.value = f"Error loading: {str(e)}"
        finally:
            page.update()

    # Set up file picker
    file_picker = ft.FilePicker(on_result=file_picker_result)
    page.overlay.append(file_picker)

    # Callback to clear data (acts as delete button)
    def clear_data(e):
        """
        Clears data and resets UI.
        """
        nonlocal df
        df = None
        x_dropdown.options = []
        y_dropdown.options = []
        x_dropdown.value = None
        y_dropdown.value = None
        chart_image.src_base64 = BLANK_IMAGE_B64
        status_text.value = "Cleared."
        page.update()

    # UI buttons
    upload_btn = ft.ElevatedButton(
        "Upload CSV",
        icon=ft.Icons.UPLOAD_FILE,
        on_click=lambda _: file_picker.pick_files(
            allow_multiple=False,
            allowed_extensions=["csv"],
        ),
    )
    clear_btn = ft.ElevatedButton(
        "Clear",
        icon=ft.Icons.DELETE,
        on_click=clear_data
    )

    # Assemble page layout
    page.add(
        ft.Column(
            [
                ft.Row([upload_btn, clear_btn]),
                ft.Row([x_dropdown, y_dropdown]),
                status_text,
                chart_image,
                # ft.Row([ai_button]),  
                # ai_output, 
            ],
            spacing=10,
        )
    )

ft.app(target=main)
